#!/usr/bin/env bds

#-------------------------------------------------------------------------------
# Build configuration files (config/snpEff.*.config)
#-------------------------------------------------------------------------------

string add_file(string file, string title) {
	if( ! file.exists() )	error("File '$file' not found!")
	println("Adding config '$title', file '$file'")
	return "\n#---\n# $title \n#---\n" + file.read()
}

# Build main configuration file (snpEff.config)
void buildConfig() {
	confDir := "$dirSnpEff/config"
	conf := "$dirSnpEff/snpEff.config"
	println "Building config file '$conf'"
	conf.rm()

	# Add files
	config := ""
	config += add_file("$confDir/snpEff.core.config", "Core")
	config += add_file("$confDir/snpEff.dbs.config", "DBs")
	config += add_file("$confDir/snpEff.test.config", "Test databases")
	config += add_file("$confDir/snpEff.ENSEMBL_$ensemblRelease\.config", "ENSEMBL release $ensemblRelease")
	config += add_file("$confDir/snpEff.UCSC.config", "UCSC genomes")
	config += add_file("$confDir/snpEff.ENSEMBL_BFMPP_$ensemblBfmppRelease\.config", "ENSEMBL BFMPP release $ensemblBfmppRelease")	# Add ENSEMBL BFMPP
	config += add_file("$confDir/snpEff.FLYBASE_$flybaseRelease\.config", "FLYBASE release $flybaseRelease") # Add flybase
	config += add_file("$confDir/snpEff.custom_requests.config", "Custom requests")	# Add custom requests
	config += add_file("$confDir/snpEff.covid19.config", "COVID")	# Add COVID19

	# Add NCBI
	for(string file: confDir.dirPath("snpEff.NCBI.*.config")) {
		config += add_file("$confDir/file", "NCBI genome")
	}

	# Add compatible versions
	for(string dbv: dbCompatibleVersions) {
		# Add compatible versions
		config += add_file("$confDir/snpEff.version.$dbv\.config", "Compatible versions: $dbv")
	}

	# Write config file
	conf.write(config)
}

# Create a 'config' file
void buildConfigFromLines(string configFile, string[] configLines) {
	if( configFile.exists() && (configFile.size() > 0)) {
		timestamp := sys date +"%Y%m%d_%H%M%S"
		timestamp = timestamp.trim()
		configFileTimestamp := configFile + "." + timestamp
		println "WARNING: Config file '$configFile' exists, using '$configFileTimestamp' instead"
		configFile = configFileTimestamp
	}
	println "Writing config file $configFile"
	configFile.write( configLines.join("\n") )
}

# Create 'software version' file
string createVersionFile(string htmlDir) {
	verFile := "$htmlDir/versions.txt"
	println "Creating versions file: '$verFile'"
	snpEffVer  := sys $snpeff -version 2>&1
	verFile.write(snpEffVer.trim().toUpper() + "\t$snpeffDownload\n");
	return verFile
}
